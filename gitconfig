; -*- mode: gitconfig -*-
; vim: ft=dosini

[init]
	defaultBranch = master

[core]
	excludesfile = ~/.gitignore
	; pager = less -RSX

[commit]
	# shows diff while writing commit messages
	verbose = true

[diff]
	renames = copies
	algorithm = histogram
	colormoved = zebra
	colorMovedWS = ignore-space-change
	;; diff.mnemonicPrefix will replace the a/ and b/ in your diff header output with where the
        ;; diff is coming from, so i/ (index), w/ (working directory) or c/ commit.
	mnemonicPrefix = true
	tool = difftastic

[difftool]
	prompt = false

[difftool "difftastic"]
	# See `man git-difftool` for a description of MERGED, LOCAL and REMOTE.
	cmd = difft "$MERGED" "$LOCAL" "abcdef1" "100644" "$REMOTE" "abcdef2" "100644"

[pager]
	difftool = true

[merge]
	conflictStyle = zdiff3

[log]
	; shows dates using the local timezone, including when using tig, magit, etc.
	; prefix with "auto:" to only switch format when the builtin PAGER is used.
	date = local

[tag]
	; sort tags properly so that v10 comes after v9 instead of v1.
	sort = version:refname

[branch]
	; Sort the output of git branch to show most recently committed to branches first.
	sort = -committerdate

[rerere]
	; enable "REuse REcorded REsolution" when handling merge conflicts.
	; should make handling merge conflicts less annoying.
	enabled = true

; Per mostrare in 'git status' anche i file nelle directory 'untracked'
; NOTA: determina la visibilita' anche in magit-status
; [status]
;       showUntrackedFiles = all

[color]
	ui = auto

; put the branch names in a column format so you can see more per screen
[column]
	ui = auto

[color "status"]
	added = green bold
	changed = red bold
	untracked = cyan
	branch = yellow black bold ul

[alias]
	co = checkout
	commit = commit -v
	; via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
	recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'
	st = status -sb
	undo = reset HEAD~1
	unpushed = log --branches --not --remotes --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	unstage = reset HEAD --
	; semantic aliases
	tags = tag -l -n1
	branches = branch -av
	remotes = remote -v
	uncommit = reset --soft HEAD^
	staged = diff --cached
	; get the root directory of the repo
	root = rev-parse --show-toplevel
	current-branch = rev-parse --abbrev-ref HEAD
	diffc = diff --color-words=.
	showc = show --color-words=.

	; difftastic
	dlog = -c diff.external=difft log --ext-diff
	dshow = -c diff.external=difft show --ext-diff
	ddiff = -c diff.external=difft diff

; Questo e' per OSX ma su Linux non crea conflitti.
[credential]
	helper = osxkeychain

; NOTE: default from git 2.0
[push]
	; https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault
	default = current
	; https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushautoSetupRemote
	autoSetupRemote = true

[user]
	name = Daniel Kertesz
	email = daniel@spatof.org

; Enable signing commits with an SSH key
; [user]
; signingKey = ~/.ssh/key.pub

; [commit]
; gpgsign = true

; [gpg]
; format = ssh

; for $deity's sake, check that anything we're getting is complete and sane on a regular basis
; https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0
[transfer]
	; actually verify the hashes
	fsckobjects = true

[fetch]
	; actually verify the hashes
	fsckobjects = true
	; automatically drop branches that are deleted on the remotes
	prune = true
	;; tags too
	pruneTags = true
	; fetch remotes in parallel
	parallel = 0
	;; If true, fetch will attempt to update all available remotes.
	all = true

[receive]
	; actually verify the hashes
	fsckObjects = true

[github]
	user = piger

; Include files
; platform specific configuration
[includeIf "gitdir:/home/"]
	path = ~/.gitconfig-linux

[includeIf "gitdir:/Users/"]
	path = ~/.gitconfig-macos

; work specific configuration
; note: can also use this format:
; [includeIf "hasconfig:remote.*.url:git@github.com:<organisation>/**"]
[includeIf "gitdir:~/code/"]
	path = ~/.gitconfig.work

; local configuration overrides
[include]
	path = ~/.gitconfig.local
