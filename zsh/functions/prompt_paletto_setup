# paletto prompt
# A prompt inspired by Alex Kretzschmar's prompt seen in:
# https://blog.ktz.me/git-submodules-for-fun-and-profit-with-ansible/

prompt_paletto_help() {
    echo "There is no help only Zuul."
}

prompt_paletto_setup() {
    # silly local function to avoid polluting the global namespace; "returns" a segment for the prompt.
    seg() {
        local background="$1"
        local foreground="$2"
        local text="$3"

        [[ ! -z $background ]] && echo -n "%K{$background}"
        [[ ! -z $foreground ]] && echo -n "%F{$foreground}"
        [[ ! -z $text ]] && echo -n "$text"
        [[ ! -z $background ]] && echo -n "%k"
        [[ ! -z $foreground ]] && echo -n "%f"

        echo
    }

    # Nerd Fonts: https://www.nerdfonts.com/cheat-sheet
    # nf-pl-left_hard_divider 
    local segment_separator=$'\ue0b0'

    # nf-oct-git_branch 
    local git_symbol=$'\uf418'

    # nf-ple-left_half_circle_thick 
    local half_circle_left=$'\ue0b6'

    # nf-ple-right_half_circle_thick 
    local half_circle_right=$'\ue0b4'

    # nf-fa-clock 
    local clock=$'\uf017'

    # https://en.wikipedia.org/wiki/Guillemet "»"
    local prompt_symbol=$'\u00bb'

    # nf-cod-vm 
    local computer=$'\uea7a'

    # nf-oct-dot_fill 
    local dot=$'\uf444'

    # nf-fa-plus 
    local plus=$'\uf067'

    # nf-oct-file_directory 
    local dir_icon=$'\uf413'

    # U+2718 : HEAVY BALLOT ✘
    local error_symbol=$'\u2718'

    # colors
    local orange='#C8642A'
    local black='#1B1914'
    local mustard='#CE9C3E'
    local grey='#3A3930'
    local green='#739C70'
    local blue='#548387'
    local black2='#2A2821'
    local blue2='#3D7FA4'
    local grey2='#645D55'
    local grey3='#3A3837'
    local cream='#FAF2CB'
    local gold='#FCBA03'
    local red='#D61C0F'

    # promptinit should already have defined $prompt_newline, so this should not be necessary.
    # https://github.com/zsh-users/zsh/blob/master/Functions/Prompts/promptinit
    [[ -z $prompt_newline ]] && prompt_newline=$'\n%{\r%}'

    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info

    # Configuration for vcs_info
    #
    # nvcsformats define the prompt segment to use when no VCS was detected; in this prompt we just
    # print an empty segment (so, the usual arrow pointing right).
    zstyle ':vcs_info:*' nvcsformats "$(seg $green $mustard "$segment_separator")$(seg $blue $green "$segment_separator")"

    # formats define the prompt segment to use when a VCS (git) was detected; it just shows the branch name.
    # We're defining two formats here, where the first is used in the first prompt line and the second is shown before the prompt symbol in the second line;
    # this can then be referred to with $vcs_info_msg_X_.
    zstyle ':vcs_info:*' formats "$(seg $green $mustard $segment_separator)$(seg $green $black2 " $git_symbol %b")$(seg $green $black2 ' ')$(seg $blue $green $segment_separator)" "$(seg '' $blue2 "%c%u")"

    # TODO: add second vcs_info_msg here?
    # actionformats define the prompt segment to use during VCS actions (e.g. rebase); it shows the action's name
    # and the branch name.
    zstyle ':vcs_info:*' actionformats "$(seg $green $mustard $segment_separator)$(seg $green $black2 " $git_symbol %b")(%a) %b$(seg $green $black2 ' ')$(seg $blue $green $segment_separator)"

    # used to signal the presence of unstaged changes
    zstyle ':vcs_info:*' unstagedstr "$dot "

    # used to signal the presence of staged changes
    zstyle ':vcs_info:*' stagedstr "$plus "

    # how to print the branch name
    zstyle ':vcs_info:*' branchformat "%b"

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' check-for-changes true

    add-zsh-hook precmd vcs_info

    PROMPT=""
    PROMPT+=$(seg '' $orange $half_circle_left)
    PROMPT+=$(seg $orange $black "$computer %m ")
    PROMPT+=$(seg $mustard $orange $segment_separator)
    PROMPT+=$(seg $mustard $grey " $dir_icon %~ ")

    #PROMPT+=$(seg $green $mustard $segment_separator)
    #PROMPT+=$(seg $green $black2 " $git_symbol ")
    PROMPT+='${vcs_info_msg_0_}'
    #PROMPT+=$(seg $green $black2 " ")
    #PROMPT+=$(seg $blue $green "$segment_separator")

    PROMPT+=$(seg $grey2 $blue "$segment_separator")
    PROMPT+=$(seg $grey3 $grey2 "$segment_separator ")
    PROMPT+=$(seg $grey3 $cream "$clock %T ")
    PROMPT+=$(seg '' $grey3 "${half_circle_right}${prompt_newline}")
    PROMPT+='${vcs_info_msg_1_}'
    # the prompt symbol will be '#' if you're root.
    PROMPT+=$(seg '' $gold "%(!.#.${prompt_symbol}) ")

    # Use RPROMPT to show the exit status of the last command if non-zero
    RPROMPT="%(?..%B%F{$red}${error_symbol}%f %?%b)"

    # Spell checker prompt: shown when the command does not exists but look similar to an existing one.
    SPROMPT="%B%R%b does not exists; did you mean %B%r%b (%BY%bes/%BN%bo/%BE%bdit/%BA%bbort)? "

    prompt_opts=(cr subst percent sp)
}

prompt_paletto_preview() {
    # prompt_preview_theme is defined by "promptinit"
    prompt_preview_theme paletto "$@"
}

prompt_paletto_setup "$@"
