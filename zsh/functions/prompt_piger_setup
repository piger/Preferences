# piger's prompt
# Daniel Kertesz <daniel@spatof.org>

prompt_piger_help() {
    cat <<EOH
This prompt takes advantage of 'vcs_info' to display useful VCS informations in the prompt.
You can chose between the short and the extended format, where the latter will also display
the typical "username@hostname" part of the prompt:

$ prompt piger extended

or

$ prompt piger

Set "PIGER_PROMPT_SYMBOL" to override the default shell symbol.
EOH
}

# The "right arrow" symbol (Powerline special character):
SEGMENT_SEPARATOR=$'\ue0b0'
# U+2718 : HEAVY BALLOT X
ERROR_SYMBOL=$'\u2718'
# U+276F : HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT
# PROMPT_SYMBOL=$'\u276f'
PROMPT_SYMBOL='$'

# hash the system's hostname letters to generate a color
prompt_piger_hostname_color() {
    local chash=0
    foreach letter (${(ws::)HOST[(ws:.:)1]}) (( chash+=#letter )) end
    printf "%03d" $(( $chash % 255 ))
}

prompt_piger_precmd() {
    # Use "psvar" to store the value of the $VIRTUAL_ENV variable; this is refreshed
    # every prompt since this function is a precmd.
    if [[ ! -z $VIRTUAL_ENV ]]; then
        psvar[1]="${VIRTUAL_ENV:t}"
    else
        psvar[1]=""
    fi
}

prompt_piger_setup() {
    local extended=$1

    # this is usually defined by 'promptinit'
    [[ -z $prompt_newline ]] && prompt_newline=$'\n%{\r%}'

    # disallow python virtualenvs from updating the prompt
    export VIRTUAL_ENV_DISABLE_PROMPT=1

    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info

    # colors
    local time_bg="236" \
          time_fg="33" \
          dir_bg="60" \
          dir_fg="147" \
          symbol_fg="30" \
          vcs_bg="230" \
          vcs_fg="70" \
          vcs_logo="20" \
          err_fg="124" \
          venv_fg="205"

    # the following 3 styles control the rendering of the "git" prompt segment; in particular the first and last chunks
    # renders the closing of the previous segment and the final prompt segment (the one that reset the background, %k).
    # The colors used here must match the colors of the previous segment, which in this case is the current directory segment.
    zstyle ':vcs_info:*' nvcsformats "%k%F{$dir_bg}$SEGMENT_SEPARATOR"
    zstyle ':vcs_info:*' formats \
           "%K{$vcs_bg}%F{$dir_bg}$SEGMENT_SEPARATOR %F{$vcs_logo} %F{$vcs_fg}%b%f %m%u%c %k%F{$vcs_bg}$SEGMENT_SEPARATOR"
    zstyle ':vcs_info:*' actionformats \
           "%K{$vcs_bg}%F{$dir_bg}$SEGMENT_SEPARATOR %F{$vcs_logo} %F{$vcs_fg}%b%F{3}|%F{1}%a%f %m%u%c %k%F{$vcs_bg}$SEGMENT_SEPARATOR"
    zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
    zstyle ':vcs_info:*' enable git svn
    zstyle ':vcs_info:*' check-for-changes true
    if [[ $PIGER_PROMPT_SIMPLE_FONT = 1 ]]; then
        zstyle ':vcs_info:*' unstagedstr '%F{3}¤%f'
        zstyle ':vcs_info:*' stagedstr '%F{2}∷%f'
    else
        zstyle ':vcs_info:*' unstagedstr '%F{3}●%f'
        zstyle ':vcs_info:*' stagedstr '%F{2}✚%f'
    fi

    add-zsh-hook precmd vcs_info
    add-zsh-hook precmd prompt_piger_precmd

    # First line of the prompt:

    # NOTE: see 'SIMPLE PROMPT ESCAPES' in the man page.
    # WARNING: be very careful about single and double quotes.
    # WARNING: remember that $(something) execute the function "something" in a subshell, so you
    # can't change global variables from within that function.

    PROMPT=""

    # time:
    PROMPT+="%K{$time_bg}%F{$time_fg}%T "
    PROMPT+="%K{$dir_bg}%F{$time_bg}$SEGMENT_SEPARATOR "

    # current directory
    PROMPT+="%K{$dir_bg}%F{$dir_fg}%~ "

    # git status
    # NOTE: ${vcs_info_msg_0_} must be passed literally (i.e. not expanded).
    PROMPT+='${vcs_info_msg_0_}'

    # reset colors and print newline
    PROMPT+="%k%f${prompt_newline}"

    # Second line of the prompt:

    # Print the mark used by iTerm2's shell integration.
    # NOTE: this must be the first "element" of the prompt's second line, otherwise
    # it will add an extra newline.
    if [[ -e $HOME/.iterm2_shell_integration.zsh ]]; then
        PROMPT+="%{$(iterm2_prompt_mark)%}"
    fi

    # Show the current virtualenv as set in psvar[1]
    PROMPT+='%(1V.%F{$venv_fg}(%1v)%f .)'

    # Show user@hostname if this is a SSH connection
    if [[ $SSH_CONNECTION != "" || ! -z $extended ]]; then
        PROMPT+="%F{$(prompt_piger_hostname_color)}%n%f@%F{$(prompt_piger_hostname_color)}%m%f "
    fi

    # Show background jobs:
    PROMPT+="%(1j.|%j.)"

    # Add '#' for root shells or $PROMPT_SYMBOL for regular users:
    PROMPT+="%F{$symbol_fg}%(!.#.${PROMPT_SYMBOL})%f "

    # Use RPROMPT to display the exit status of the last executed command when non-zero.
    # NOTE: "CONDITIONAL SUBSTRINGS IN PROMPTS" in zshmisc.
    # read: if the exit code of the last command was 0, show an empty string, otherwise show it (%?) with colors and bold
    RPROMPT="%(?..%B%F{$err_fg}${ERROR_SYMBOL}%f %?%b)"

    # Spell checker prompt: shown when the command does not exists but look similar to an existing one.
    SPROMPT="%B%R%b does not exists; did you mean %B%r%b (%BY%bes/%BN%bo/%BE%bdit/%BA%bbort)? "

    # set prompt options through promptinit
    prompt_opts=(cr subst percent sp)
}

prompt_piger_preview() {
    prompt_preview_theme piger "$@"
}

prompt_piger_setup "$@"
