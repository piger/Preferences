# piger's prompt
# Daniel Kertesz <daniel@spatof.org>

prompt_piger_help() {
    cat <<EOH
This prompt takes advantage of 'vcs_info' to display useful VCS informations in the prompt.
You can chose between the short and the extended format, where the latter will also display
the typical "username@hostname" part of the prompt:

$ prompt piger extended

or

$ prompt piger

Set "PIGER_PROMPT_SYMBOL" to override the default shell symbol.
EOH
}

# The "right arrow" symbol (Powerline special character):
SEGMENT_SEPARATOR=$'\ue0b0'
# U+2718 : HEAVY BALLOT X
ERROR_SYMBOL=$'\u2718'
# U+276F : HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT
# PROMPT_SYMBOL=$'\u276f'
PROMPT_SYMBOL='$'

prompt_piger_segment() {
    local bg fg next
    bg="%K{$1}"
    fg="%F{$2}"
    next="%F{$1}%K{$3}"
    echo -n "${bg}${fg}$4 ${next}${SEGMENT_SEPARATOR}"
}

# hash the system's hostname letters to generate a color
prompt_piger_hostname_color() {
    if [[ ! -z $PIGER_PROMPT_HARDCODE_COLOR ]]; then
        echo "$PIGER_PROMPT_HARDCODE_COLOR"
    else
        local chash=0
        foreach letter (${(ws::)HOST[(ws:.:)1]}) (( chash+=#letter )) end
        printf "%03d" $(( $chash % 255 ))
    fi
}

prompt_piger_precmd() {
    # Use "psvar" to store the value of the $VIRTUAL_ENV variable; this is refreshed
    # every prompt since this function is a precmd.
    if [[ ! -z $VIRTUAL_ENV ]]; then
        psvar[1]="${VIRTUAL_ENV:t}"
    else
        psvar[1]=""
    fi
}

prompt_piger_setup() {
    local extended=$1

    # this is usually defined by 'promptinit'
    [[ -z $prompt_newline ]] && prompt_newline=$'\n%{\r%}'

    # disallow python virtualenvs from updating the prompt
    export VIRTUAL_ENV_DISABLE_PROMPT=1

    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info

    zstyle ':vcs_info:*' actionformats \
           ' %F{64}%F{10}%b%F{3}|%F{1}%a%F{64}%f %m%u%c'
    zstyle ':vcs_info:*' formats \
           ' %F{64}%F{70}%b%F{64}%f %m%u%c'
    zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
    zstyle ':vcs_info:*' enable git svn
    zstyle ':vcs_info:*' check-for-changes true
    if [[ $PIGER_PROMPT_SIMPLE_FONT = 1 ]]; then
        zstyle ':vcs_info:*' unstagedstr '%F{3}¤%f'
        zstyle ':vcs_info:*' stagedstr '%F{2}∷%f'
    else
        zstyle ':vcs_info:*' unstagedstr '%F{3}●%f'
        zstyle ':vcs_info:*' stagedstr '%F{2}✚%f'
    fi

    add-zsh-hook precmd vcs_info
    # add-zsh-hook precmd prompt_piger_precmd

    # First line of the prompt:

    # NOTE: see 'SIMPLE PROMPT ESCAPES' in the man page.

    PROMPT=''

    # time:
    PROMPT+='$(prompt_piger_segment 236 033 60 %T) '

    # virtual env
    # %(1V.%F{205}(%1v)%f .)

    # current directory
    PROMPT+='$(prompt_piger_segment 60 147 230 %~) '

    # git status
    PROMPT+='$(prompt_piger_segment 230 20 0 ${vcs_info_msg_0_}) '

    # reset colors and print newline
    PROMPT+='%k%f${prompt_newline}'

    # Second line of the prompt:

    # Show user@hostname if this is a SSH connection
    if [[ $SSH_CONNECTION != "" ]]; then
        PROMPT+='%F{$(prompt_piger_hostname_color)}%n%f@%F{$(prompt_piger_hostname_color)}%m%f '
    fi

    # Show background jobs:
    PROMPT+='%(1j.|%j.)'

    # Add '#' for root shells or $PROMPT_SYMBOL for regular users:
    PROMPT+='%F{030}%(!.#.${PROMPT_SYMBOL})%f '

    # Use RPROMPT to display the exit status of the last executed command when non-zero.
    # NOTE: "CONDITIONAL SUBSTRINGS IN PROMPTS" in zshmisc.
    # read: if the exit code of the last command was 0, show an empty string, otherwise show it (%?) with colors and bold
    RPROMPT='%(?..%B%F{124}${ERROR_SYMBOL}%f %?%b)'

    # Spell checker prompt: shown when the command does not exists but look similar to an existing one.
    SPROMPT="%B%R%b does not exists; did you mean %B%r%b (%BY%bes/%BN%bo/%BE%bdit/%BA%bbort)? "

    # set prompt options through promptinit
    prompt_opts=(cr subst percent sp)
}

prompt_piger_preview() {
    prompt_preview_theme piger "$@"
}

prompt_piger_setup "$@"
