# piger's prompt
# Daniel Kertesz <daniel@spatof.org>

prompt_piger_help() {
    cat <<EOH
This prompt takes advantage of 'vcs_info' to display useful VCS informations in the prompt.
You can chose between the short and the extended format, where the latter will also display
the typical "username@hostname" part of the prompt:

$ prompt piger extended

or

$ prompt piger

Set "PIGER_PROMPT_SYMBOL" to override the default shell symbol.
EOH
}

# hash the system's hostname letters to generate a color
prompt_piger_hostname_color() {
    if [[ ! -z $PIGER_PROMPT_HARDCODE_COLOR ]]; then
        echo "$PIGER_PROMPT_HARDCODE_COLOR"
    else
        local chash=0
        foreach letter (${(ws::)HOST[(ws:.:)1]}) (( chash+=#letter )) end
        printf "%03d" $(( $chash % 255 ))
    fi
}

prompt_piger_precmd() {
    # virtualenv
    if [[ ! -z $VIRTUAL_ENV ]]; then
        psvar[1]="${VIRTUAL_ENV:t}"
    else
        psvar[1]=""
    fi
}

prompt_piger_setup() {
    local extended=$1

    # this is usually defined by 'promptinit'
    [[ -z $prompt_newline ]] && prompt_newline=$'\n%{\r%}'

    # disallow python virtualenvs from updating the prompt
    export VIRTUAL_ENV_DISABLE_PROMPT=1

    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info

    zstyle ':vcs_info:*' actionformats \
           ' %F{64}%F{10}%b%F{3}|%F{1}%a%F{64}%f %m%u%c'
    zstyle ':vcs_info:*' formats \
           ' %F{64}%F{70}%b%F{64}%f %m%u%c'
    zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
    zstyle ':vcs_info:*' enable git svn
    zstyle ':vcs_info:*' check-for-changes true
    if [[ $PIGER_PROMPT_SIMPLE_FONT = 1 ]]; then
        zstyle ':vcs_info:*' unstagedstr '%F{3}¤%f'
        zstyle ':vcs_info:*' stagedstr '%F{2}∷%f'
    else
        zstyle ':vcs_info:*' unstagedstr '%F{3}●%f'
        zstyle ':vcs_info:*' stagedstr '%F{2}✚%f'
    fi
    zstyle ':vcs_info:*' use-quilt true

    add-zsh-hook precmd vcs_info
    add-zsh-hook precmd prompt_piger_precmd

    # Build our prompt
    # timestamp, optional virtualenv name, current directory, vcs_info, newline
    PROMPT='%K{236}%F{033}%T %F{236}%K{060} %(1V.%F{205}(%1v)%f .)%F{147}%B%~%b %F{060}%K{237} ${vcs_info_msg_0_}%F{237}%k%f${prompt_newline}'

    # username and hostname, background jobs
    if [[ $SSH_CONNECTION != "" || $UID -eq 0 || $extended != "" ]]; then
        PROMPT+='%F{$(prompt_piger_hostname_color)}%n%f@%F{$(prompt_piger_hostname_color)}%m%f%(1j.|%j.) '
    else
        PROMPT+='%(1j.|%j.)'
    fi

    # final prompt
    PROMPT+='%F{$(prompt_piger_hostname_color)}%(!.#.${PIGER_PROMPT_SYMBOL:-❯})%f '

    # Use RPROMPT to display the exit status of the last executed command when non-zero.
    # NOTE: "CONDITIONAL SUBSTRINGS IN PROMPTS" in zshmisc.
    if [[ $PIGER_PROMPT_SIMPLE_FONT = 1 ]]; then
        RPROMPT='%(?..%B%F{124}◆%f %?%b)'
    else
        RPROMPT='%(?..%B%F{124}✘%f %?%b)'
    fi

    # Spell checker prompt.
    # default: correct 'mano' to 'nano' [nyae]?
    if [[ $PIGER_PROMPT_SIMPLE_FONT = 1 ]]; then
        SPROMPT="≈±≈ correct '%R' to '%r' ? ([Y]es/[N]o/[E]dit/[A]bort) "
    else
        SPROMPT="٩(͡๏̯͡๏)۶ correct '%R' to '%r' ? ([Y]es/[N]o/[E]dit/[A]bort) "
    fi

    # set prompt options through promptinit
    prompt_opts=(cr subst percent sp)
}

prompt_piger_preview() {
    prompt_preview_theme piger "$@"
}

prompt_piger_setup "$@"
