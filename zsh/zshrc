# -*- mode: shell-script; eval: (outline-minor-mode t) -*-

# Uncomment here and at the bottom of this file to profile this file
# zmodload zsh/zprof

#
# ‚îª‚îÅ‚îªÔ∏µ \(¬∞‚ñ°¬∞)/ Ô∏µ ‚îª‚îÅ‚îª
# FLIP ALL DEM TABLEZ!

# CONFIG {{{
# Settings can be customized inside ~/.zshenv.local.
DIRCOLORS_FILE=${DIRCOLORS_FILE:-$HOME/Preferences/zsh/dircolors-solarized/dircolors.256dark}
FORTUNES_DIRECTORY=${FORTUNES_DIRECTORY:-$HOME/dev/fortune-tvshows/fortunes}
# }}}

# NOTES {{{
# According to http://bewatermyfriend.org/p/2012/003/ 'autoload -Uz <name>' is
# "the right thing"[tm] almost always.
# }}}

# OPTIONS {{{

# If a command is issued that can't be executed as a normal command,
# and the command is the name of a directory, perform the cd command
# to that directory.
setopt auto_cd

# Make cd push the old directory onto the directory stack.
setopt auto_pushd

# Report the status of background and suspended jobs before exiting a
# shell with job control; a second attempt to exit the shell will
# succeed.
setopt check_jobs

# 03/08/2016 - This causes errors with "chef" hostname completion :(
# If unset, the cursor is set to the end of the word if completion is
# started. Otherwise it stays there and completion is done from both
# ends.
# setopt complete_in_word

# Try to correct the spelling of commands.
setopt correct

# Perform = filename expansion (e.g. echo =ssh -> /usr/bin/ssh)
setopt equals

# Treat the `#', `~' and `^' characters as part of patterns for
# filename generation, etc.
setopt extended_glob

# Try to make the completion list smaller (occupying less lines) by
# printing the matches in columns with different widths.
setopt list_packed

# List jobs in the long format by default.
setopt long_list_jobs

# Report the status of background jobs immediately, rather than
# waiting until just before printing a prompt.
setopt notify

# If numeric filenames are matched by a filename generation pattern,
# sort the filenames numerically rather than lexicographically.
setopt numeric_glob_sort

# Print the exit value of programs with non-zero exit status.
setopt print_exit_value

# Parameter expansion, command substitution and arithmetic expansion
# are performed in prompts.
setopt prompt_subst

# Don't push multiple copies of the same directory onto the directory
# stack.
setopt pushd_ignore_dups

# Allow the short forms of for, repeat, select, if, and function
# constructs.
setopt short_loops

# Allow comments even in interactive shells.
setopt interactive_comments

# Remove any right prompt from display when accepting a command line.
# This may be useful with terminals with other cut/paste methods.
setopt transient_rprompt

# Regular expression matching with the =~ operator will use
# Perl-Compatible Regular Expressions from the PCRE library, if
# available.
# setopt rematch_pcre

# Assume that the terminal displays combining characters
# correctly. (i.e. UTF-8)
[[ $ZSH_VERSION == <5->.* ]] && setopt combining_chars

# Disabled options
# ----------------

# Disable bell alert
setopt NO_beep

# Output flow control via start/stop characters (usually assigned to
# ^S/^Q) is disabled in the shell's editor.
setopt NO_flow_control

# Do not send the HUP signal to running jobs when the shell exits.
setopt NO_hup

# Query the user before executing `rm *' or `rm path/*'.
setopt NO_rm_star_silent

# }}}

# FUNCTIONS {{{
function exists() { which $1 &> /dev/null }

# https://github.com/myfreeweb/zshuery/blob/master/zshuery.sh
rot13() {
        echo $@ | tr "A-Za-z" "N-ZA-Mn-za-m"
}

urlencode() { python -c "import sys, urllib; print urllib.quote_plus(sys.argv[1])" $@ }
urldecode() { python -c "import sys, urllib; print urllib.unquote_plus(sys.argv[1])" $@ }

teprego() {
    echo -e "$(tput setaf 1)sudo$(tput sgr0) ‚Üí $(fc -ln -1)"
    eval "sudo $(fc -ln -1)"
}
# }}}

# ENVIRONMENT {{{
# Queste variabili d'ambiente servono solo in modalita' interattiva
# Binda le seguenti variabili d'ambiente ai loro rispettivi array (ex: $perl5lib[@] )
declare -T LD_LIBRARY_PATH ld_library_path
declare -T PERL5LIB perl5lib
declare -T PYTHONPATH pythonpath

# Ansible pls
export ANSIBLE_NOCOWS=1

# FTP in passive mode (CPAN)
export FTP_PASSIVE=1

# Controllo accessi al server
watch=(notme)
LOGCHECK=300            # check every 5 min for login/logout activity
WATCHFMT='%n %a %l from %m at %t.'

# report about cpu-/system-/user-time of command if running longer than
# 5 seconds
# REPORTTIME=5

# PRIVACY - disattiva history del client mysql
export MYSQL_HISTFILE=/dev/null
export LESSHISTFILE=/dev/null
# }}}

# HISTORY {{{
# Appende al file $HISTORY, invece di sovrascrivere.
setopt append_history
# Salva i timestamp nella history.
setopt extended_history
# se il comando e' uguale al precedente non metterlo nella history.
setopt hist_ignore_dups
# non salvare nella history i comandi "history".
setopt hist_no_store
# quando si usa la history expansion non esegue direttamente, cosi'
# vedi che stai per fare.
setopt hist_verify
# non salva nella history le command line che iniziano con uno spazio
# (utile quando si inseriscono pw)
setopt hist_ignore_space
# cerca di cancellare dalla history i duplicati prima degli eventi unici.
setopt hist_expire_dups_first
# February 21, 2013 - 2000 di history √® troppo poco, proviamo 12000 e vediamo
# che accade (che tra l'altro √® pi√π di prima :-)
SAVEHIST=10000
HISTSIZE=12000

# set the history file
HISTFILE=$HOME/.history
# }}}

# COMMANDS CONFIGURATION {{{
# Opzioni per less
# -c    : pulisce lo schermo prima di mostrare il file
# -i    : ignore case (ma una ricerca uppercase annulla l'opzione)
# -M    : mostra percentuale del file ed e' piu' verboso di more
# -R    : attiva i colori ANSI
# -x<n> : lunghezza del tab
# -w    : Temporarily highlights the first "new" line after a forward movement of a full page.
# -J    : Mostra una 'status column' che indica la posizione dei match della ricerca.
# -z-5  : Scrolling mantenendo 5 righe.
LESS="-ciMRx4wJ -z-5"
PAGER=less
export LESS PAGER

# man page colorate SENZA usare most! ;-P
# http://nion.modprobe.de/blog/archives/572-less-colors-for-man-pages.html
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Cthulhu ^(;,;)^ hates the nano editor!
if (( $+commands[vim] )); then
    export EDITOR=vim
    export VISUAL=vim
else
    export EDITOR=vi
    export VISUAL=vi
fi

# `grep` options
# - grep colors (highlight verde)
# - skippa i file device, FIFO e socket.
# GREP_OPTIONS is deprecated, because fuck you
# export GREP_OPTIONS='--color=auto -D skip'
export GREP_COLOR='1;32'

# ssh-askpass support
(( $+commands[ssh-askpass] )) && export SSH_ASKPASS=$commands[ssh-askpass]

# LS OPTIONS
ls_options='--classify=auto --group-directories-first'
[[ $UID = 0 ]] && ls_options+='A'
# }}}

# ZSH MODULES {{{
# The zsh/complist module offers three extensions to completion
# listings: the ability to highlight matches in such a list, the
# ability to scroll through long lists and a different style of menu
# completion.
zmodload zsh/complist

# Use human-friendly key identifiers.
zmodload zsh/terminfo
typeset -g -A keyinfo
keyinfo=(
  'Control'   '\C-'
  'Escape'    '\e'
  'Meta'      '\M-'
  'F1'        "$terminfo[kf1]"
  'F2'        "$terminfo[kf2]"
  'F3'        "$terminfo[kf3]"
  'F4'        "$terminfo[kf4]"
  'F5'        "$terminfo[kf5]"
  'F6'        "$terminfo[kf6]"
  'F7'        "$terminfo[kf7]"
  'F8'        "$terminfo[kf8]"
  'F9'        "$terminfo[kf9]"
  'F10'       "$terminfo[kf10]"
  'F11'       "$terminfo[kf11]"
  'F12'       "$terminfo[kf12]"
  'Backspace' "$terminfo[kbs]"
  'Insert'    "$terminfo[kich1]"
  'Home'      "$terminfo[khome]"
  'PageUp'    "$terminfo[kpp]"
  'Delete'    "$terminfo[kdch1]"
  'End'       "$terminfo[kend]"
  'PageDown'  "$terminfo[knp]"
  'Up'        "$terminfo[kcuu1]"
  'Left'      "$terminfo[kcub1]"
  'Down'      "$terminfo[kcud1]"
  'Right'     "$terminfo[kcuf1]"
  'BackTab'   "$terminfo[kcbt]"
)
# }}}

# BINDINGS {{{
# META+delete come in bash, invece che settare WORDCHARS
autoload -Uz select-word-style
select-word-style bash

# emacs bindings (odio la modalita' vi)
bindkey -e

bindkey  '\e[5~' up-history             # PageUp -> history up
bindkey  '\e[6~' down-history           # PageDown -> history down
bindkey  '[Z' reverse-menu-complete   # SHIFT+TAB per il tab "all'indietro"

# CTRL, ALT & co.
bindkey  '^z' undo                      # CTRL+z per undo di expansion e completion
bindkey  '\C-w' kill-region

# predict
# [NOTA: non √® per niente comodo...]
# autoload -Uz predict-on
# zle -N predict-on
# zle -N predict-off
# bindkey "^X^Z" predict-on     # CTRL+X CTRL+Z per attivare il predict
# bindkey "^Z" predict-off      # CTRL+Z per disattivare il predict

# sudo
# Binda ALT+s a 'metti-sudo-all'inizio-della-riga'
_add-sudo() { [[ $BUFFER != sudo\ * ]] && LBUFFER="sudo $LBUFFER" }
zle -N add-sudo _add-sudo
# ALT+s per inserire 'sudo' a inizio cmdline.
bindkey '\es' add-sudo

# Edita la linea di comando con $EDITOR
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '\ee' edit-command-line         # ALT+e per editare la cmdline

# Alt+m copia la parola precedente, comodo per i file rename.
bindkey "^[m" copy-prev-shell-word

# autoload -U zkbd
# Eseguire zkbd per compilare una lista di variabili associate ai tasti
#source ~/.zkbd/$TERM-$VENDOR-$OSTYPE
#    [[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
#    [[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
#    # etc.

# idea from: zsh-lovers
insert-datestamp() { LBUFFER+=${(%):-'%D{%d-%m-%Y}'}; }
zle -N insert-datestamp
# C-e d -- insert current date dd-mm-YYYY
bindkey '^Ed' insert-datestamp

# https://github.com/junegunn/fzf/blob/764316a53d0eb60b315f0bbcd513de58ed57a876/shell/key-bindings.zsh
fzf-history-widget() {
    local selected num
    setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
    selected=( $(fc -rl 1 | perl -ne 'print if !$seen{(/^\s*[0-9]+\**\s+(.*)/, $1)}++' |
        FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-80%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort,ctrl-z:ignore $FZF_CTRL_R_OPTS --query=${(qqq)LBUFFER} +m" fzf) )
    local ret=$?
    if [ -n "$selected" ]; then
        num=$selected[1]
        if [ -n "$num" ]; then
            zle vi-fetch-history -n $num
        fi
    fi
    zle reset-prompt
    return $ret
}

if exists fzf; then
    zle     -N   fzf-history-widget
    bindkey '^R' fzf-history-widget
fi
# }}}

# AUTOLOADS {{{
# Add my own functions collections to fpath, for autoload to work.
# See also:
# http://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh
typeset -U fpath
[[ -d ~/Preferences/zsh/scripts ]] && fpath+=~/Preferences/zsh/scripts
[[ -d ~/Preferences/zsh/functions ]] && fpath+=~/Preferences/zsh/functions

# Autoload any custom function that I really use
useful_autoloads=(bssh gh-link ssh ssh_master_shutdown sfortune suca ssh_bg whatwhen apple-logo unix2date welcome dut http-server quote-for-knife set-iterm2-title)
for fn in $useful_autoloads; do autoload -Uz $fn; done

# autoload mini-help
# -U also causes alias expansion to be suppressed  when  the  function is loaded
# The -k and -z flags make the function be loaded using  ksh-style  or
# zsh-style autoloading  respectively
### autoload -Uz compinit
### compinit
autoload -Uz zcalc zmv zargs

# url-quote-magic
# Will automatically quote a URL as you type/paste.
# This conflicts with the bracketed paste support, see:
# https://github.com/robbyrussell/oh-my-zsh/blob/291e96dcd034750fbe7473482508c08833b168e3/lib/misc.zsh
# autoload -Uz url-quote-magic
# zle -N self-insert url-quote-magic
# NOTE: there's a fix but probably I prefer to disable this entirely. URLs must be shell-quoted and
# that's it.

# }}}

# PROMPT {{{

# define an empty list of "precmd" functions so it's easier to conditionally
# add functionalities like 'vcs_info'; see "Hook Functions" in zshmisc(1).
# typeset -a precmd_functions

# NOTE: both of the following are disabled because we're now using a proper "promptinit" theme.
# if exists vcs_info; then
#     precmd_functions+=vcs_info
#     # precmd_functions+=lazy_vcs_info
# fi

# load zsh-notify first, as it needs to set up the first "precmd" hook before all the others,
# to be able to access the original $? from the last command (and not from the last hook)
source_if_exists "$HOME/dev/zsh-notify/zsh-notify.zsh"

# Use the prompt framework for our own prompt (see ~/.zsh/functions/prompt_piger_setup).
autoload -U promptinit
promptinit

autoload -Uz prompt_piger_setup
prompt piger
# }}}

# OS SPECIFIC {{{
if [[ $OSTYPE = darwin* ]]; then
    # top comodo
    alias itop="top -u -s 5 -stats pid,username,command,cpu,time,mem,vsize,ppid,state"

    # lock screen
    alias afk="pmset displaysleepnow"

    # start the screensaver
    alias screensaver='/System/Library/CoreServices/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine'

    # ls
    if exists gls && [[ "$TERM" != dumb ]]; then
        alias ls="gls --color=auto $ls_options"
        (( $+commands[gdircolors] )) && test -e $DIRCOLORS_FILE && eval $(gdircolors -b $DIRCOLORS_FILE)
    fi

    export CLICOLOR=1

    # Trasforma la man page in PDF e la apre con Preview, votamazzen.
    function man-preview() {
        man -t "$@" | open -f -a Preview
    }

    # print Finder directory
    function pfd() {
        osascript 2>/dev/null <<EOF
    tell application "Finder"
            return POSIX path of (target of window 1 as alias)
    end tell
EOF
    }

    # cd to Finder directory
    cdf() { eval cd "$(osascript -e 'tell app "Finder" to return the quoted form of the POSIX path of (target of window 1 as alias)' 2>/dev/null)" }

    # print Finder selection
    function pfs() {
        osascript 2>/dev/null <<EOF
        set output to ""
        tell application "Finder" to set the_selection to selection
        set item_count to count the_selection
        repeat with item_index from 1 to count the_selection
          if item_index is less than item_count then set the_delimiter to "\n"
          if item_index is item_count then set the_delimiter to ""
          set output to output & ((item item_index of the_selection as alias)'s POSIX path) & the_delimiter
        end repeat
EOF
    }

    # cli volume control
    vol() {
        if [[ -n $1 ]]; then
            osascript -e "set volume output volume $1"
        else
            osascript -e "output volume of (get volume settings)"
        fi
    }

    # locate with Spotlight
    locatemd() {
        mdfind "kMDItemDisplayName == '$@'wc"
    }

    # Flush DNS cache
    alias flush_dns_cache='dscacheutil -flushcache'

    # xcode 5.1
    # http://kaspermunck.github.io/2014/03/fixing-clang-error/
    export ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future

elif [[ $OSTYPE = linux* ]]; then
    alias ls="ls --color=auto $ls_options"

    if (( ! $+commands[gnome-open] )); then
        alias gnome-open='echo quei maledetti di GNOME hanno deciso che ora si chiama gvfs-open, gli morisse la gente attorno'
    fi

    alias grep='grep --color=auto'

    if [ -e /etc/debian_version ]; then
        alias search="apt-cache search"
        alias show="apt-cache show"
        alias i="sudo aptitude install"
        # alias backports="sudo aptitude -t lenny-backports"
        # list installed packages by size
        alias large_packages="dpkg-query -Wf '\${Installed-Size}\t\${Package}\n' | sort -n"
    fi

    # LS_COLORS
    (( $+commands[dircolors] )) && test -e $DIRCOLORS_FILE && eval $(dircolors -b $DIRCOLORS_FILE)

elif [[ $OSTYPE = openbsd* ]]; then
    if (( $+commands[gls] )); then
        alias ls="gls --color=auto $ls_options"
    else
        alias ls="ls $ls_options"
    fi

    alias pfdump="tcpdump -n -e -ttt -i pflog0"
    alias pfrerules="pfctl -F rules -R -f /etc/pf.conf"
    alias pfrenat="pfctl -F nat -N -f /etc/pf.conf"
fi # end if $OSTYPE = ...
# }}}

# ALIASES {{{
# Aliases e altri comandi che non uso mai perche' sono SCEMO
# ----------------------------------------------------------
# man zshexpn -> search Glob Qualifier
alias h='fc -l -t "%d/%m/%Y %H:%M" -D'
alias la="ls -a"
alias lsd="ls -ld *(-/)"                # ls delle sole directory
alias lsa="ls -ld .*"                   # ls dei soli file nascosti
alias lsgrandi="ls -fl *(.oL)"  # ls -lrh --sort=size
alias lsuid="ls -l *(s,S,t)"    # ls solo di file suid/setgid/sticky
alias dirvuote="ls -ld *(/^F)"  # ls solo delle directory vuote
alias lsnodot="ls *~*.*(.)"             # ls dei file senza estenzione
alias lsoggi="ls *(m0)"                 # ls dei file modificati oggi
alias dirdu="du -Hhs *(/,@)"    # du -h di ogni dir presente
alias ..='cd ..'
alias ...='cd ../..'

# disable spell correction
alias rm="nocorrect rm"

# disable globbing (i.e. do not expand arguments like "*" to the actual list of files)
alias scp="noglob scp"

# interactive versions
alias rmi="rm -i"
alias mvi="mv -i"
alias cpi="cp -i"

# alias globali, che pero' non gradisco.
alias -g L='|less'
alias -g H='|head'
alias -g T='|tail'

# suffix aliases
alias -s asc='gpg'

alias pwgen_strong='pwgen -y1 15 20'

# alias simpatici
alias suco='sudo'
# per poter fare 'mortacci tua kill -9 31337'
alias mortacci=";"
alias tua=";"
alias shitdown="shutdown"

# stampa la penultima riga di un input
penultima() { awk '{ lines[NR] = $0 } END { print lines[NR-1] }' }

# oggi
alias oggi='date "+%d-%m-%Y"'

# rsync verso un filesystem FAT32
alias rsync_fat32='rsync --modify-window=1'

# emacsclient + newframe
alias e='emacsclient -c'

# ruby merda
alias be='bundle exec'

function tableflip() { echo '(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª' }

# python json tool (un pretty-printer)
alias json.tool='python -m json.tool'

# quick download
alias suggi='curl --continue-at - --location --progress-bar --remote-name --remote-time'

# history stats
# https://github.com/sorin-ionescu/prezto/blob/master/modules/history/init.zsh
alias history-top10="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"

# yaml2json
# https://twitter.com/micahhausler/status/1057064499226656768
# alias y2j="python -c 'import sys, yaml, json; y=yaml.safe_load(sys.stdin.read()); print(json.dumps(y, default=lambda obj: obj.isoformat() if hasattr(obj, \"isoformat\") else obj))'"
alias y2j="python -c 'import fileinput, yaml, json; y=yaml.safe_load(\"\".join(list(fileinput.input()))); print(json.dumps(y, default=lambda obj: obj.isoformat() if hasattr(obj, \"isoformat\") else obj))'"

if (( $+commands[task] )); then
    alias t='task'
fi

# }}}

# COMPLETION {{{
# Completion della ZSH, perche' la pigerrimitudo e' una virtute.
# --------------------------------------------------------------
#
# :completion:function:completer:command:argument:tag

# completion indicator
# source: https://github.com/mattjj/my-oh-my-zsh/blob/master/keyboard.zsh
zstyle ':omz:completion' indicator '...'

function expand-or-complete-prefix-with-indicator() {
  local indicator
  zstyle -s ':omz:completion' indicator 'indicator'
  print -Pn "$indicator"
  zle expand-or-complete-prefix
  zle redisplay
}
zle -N expand-or-complete-prefix-with-indicator

# 02/12/2015 - middle word completion doesn't work well with the chef hostname completion.

# Complete in the middle of word.
# [[ -n "$keyinfo[Control]" ]] && \
#     bindkey -M "emacs" "$keyinfo[Control]I" expand-or-complete-prefix

# Complete in the middle of word and show indicator. (remember to comment previous binding)
# [[ -n "$keyinfo[Control]" ]] && \
#     bindkey -M "emacs" "$keyinfo[Control]I" \
#     expand-or-complete-prefix-with-indicator

# Completion per task warrior
# NOTA: fpath va modificato PRIMA di chiamare 'compinit'.
[[ -e /usr/local/share/doc/task/scripts/zsh/_task ]] && fpath=($fpath /usr/local/share/doc/task/scripts/zsh/)
[[ -e /usr/share/doc/task/scripts/zsh/_task ]] && fpath=($fpath /usr/share/doc/task/scripts/zsh/)

# zsh-completions
# OS X: install with "brew install zsh-completions"
[[ -d /usr/local/share/zsh-completions/ ]] && fpath=(/usr/local/share/zsh-completions $fpath)

# compinstall, dilemma TODO
zstyle :compinstall filename '~/.zshrc'

# questo va all'inizio, altrimenti poi non ho `compdef` o altri comandi.
autoload -Uz compinit && compinit

# supporto bash completion (da chiamare DOPO 'compinit')
autoload -Uz bashcompinit && bashcompinit

# Lista di completers
# _prefix deve stare prima di _approximate, senno' e' OLOCAUSTO
# _ignored completa file/dir che per altre impostazioni verrebbero ignorati
#zstyle ':completion:::::' completer _complete _prefix _approximate _ignored

# Forza il rehash per ogni uso della completion (ie: premi tab).
# http://zshwiki.org/home/examples/compquickstart?s=rehash
_force_rehash() {
    (( CURRENT == 1 )) && rehash
    return 1    # Because we didn't really complete anything.
}
zstyle ':completion:*' rehash true      # rehash automatico, ma non sembra funzionare... TODO

# Abilita i messaggi della completion, aggiunge bold ad alcune stringhe
# e raggruppa i risultati per tipologia (fidati, e' MEGLIO COSI')
zstyle ':completion:*:messages' format %d
zstyle ':completion:*:warnings' format '%BNo matches%b: %d'
zstyle ':completion:*:descriptions' format '%B%d%b'
# raggrouppa l'output
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-separator '-->'
# Non completare i nomi delle funzioni che iniziano per '_'
#zstyle ':completion::complete:*:functions' ignored-patterns '_*'
# che sia cosi'?
zstyle ':completion:*:functions' ignored-patterns '_*'

# separa i man per sezione
zstyle ':completion:*:manuals' separate-sections true

# Mostra le descrizioni per cio' che viene completato, ad esempio le opzioni di ls;
# quando manca la descrizione, prova a "indovinare"
zstyle ':completion:*' verbose yes
zstyle ':completion:*' auto-description 'specify: %d'

# Utilizza un pager interno quando i risultati della completion sono troppi
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
bindkey -M listscroll q send-break      # binda 'q' per uscire dal pager

# Limit this fuckung "zsh: do you wish to see all NNN possibilities (NNN
# lines)?" downward (default is 100). Only ask before displaying
# completions if doing so would scroll. (strcat.de)
#LISTMAX=0

# Completion approssimativa, permette un errore ogni 3 caratteri
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:::::' completer _force_rehash _complete _prefix _approximate _ignored
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX+$#SUFFIX)/3 ))numeric)'
# Completa cose tipo: gzip _-d -> gzip --decompress
zstyle ':completion::approximate*:*' prefix-needed false

# Case insensitive: converte solo le minuscole in maiuscole, perche' come dicono
# NEL LIBRO, per scrivere le maiuscole devi premere anche shift, ed e' quindi piu'
# probabile che sia una scelta deliberata e non un errore di battitura
# INOLTRE, implementa la Partial Completion, usando '/' come carattere anchor: cio'
# permette finezze come cd /u/l/b -> cd /usr/local/bin -- e' come premere TAB su ogni
# '/'
zstyle ':completion:*:(^approximate):*' matcher-list \
        'r:|[/]=* r:|=* m:{a-z}={A-Z}'

# titoli [from: https://github.com/seebi/zshrc]
zstyle ':completion:*:messages' format $'\e[01;35m -- %d -- \e[00;00m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found -- \e[00;00m'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d -- \e[00;00m'
zstyle ':completion:*:corrections' format $'\e[01;33m -- %d -- \e[00;00m'

# statusline for many hits [from: https://github.com/seebi/zshrc]
zstyle ':completion:*:default' select-prompt $'\e[01;35m -- Match %M %P -- \e[00;00m'

# Prefix Completion: se il cursore e' nel mezzo di una word, zsh completa come se il
# cursore si trovasse a fine word; l'opposto si ottiene abilitando complete_in_word.
# Un altro approccio consiste nel completare ignorando completamente il suffix...
zstyle ':completion::prefix:::' completer _complete
zstyle ':completion:*:prefix:*' add-space true  # aggiunge anche uno spazio

# Esclusioni
# Avendo '_ignored' tra i completer, le seguenti regole verranno ignorate nel caso
# in cui non ci sia altro da completare
zstyle ':completion:*:*:cd:*' ignored-patterns '(*/|)(CVS)'
# Evita di completare cio' che e' gia' sulla command line
# Questo e' AAAH, sputtana la completion e il Tab non cycla piu' tra i possibili match :-(
#zstyle ':completion:*:(rm|rmdir|grep|vim|vi):*' ignore-line true
# Non completare le directory se la completion "non ha senso" (../$PWD non ha senso)
#zstyle ':completion:*' ignore-parents parent pwd
# meglio?
zstyle ':completion:*:cd:*' ignore-parents parent pwd
# Per abilitare la completion di "cd ../"
zstyle ':completion:*' special-dirs true

# Completa cio' che non ESISTE, UN FILM DI ZARRO SUCUNI
zstyle ':completion::*:(-command-|export):*' fake-parameters DISPLAY:scalar \
    LD_LIBRARY_PATH:array COLUMNS:scalar LANG:scalar LC_ALL:scalar CVSROOT:scalar \
    PERL5LIB:array PYTHONPATH:array DJANGO_SETTINGS_MODULE:scalar \
    SSH_AUTH_SOCK:scalar DYLD_LIBRARY_PATH:array DYLD_FALLBACK_LIBRARY_PATH:array

# Completion per `kill`: mostra una lista di processi con la percentuale di CPU
# utilizzata, e su linux come bonus mostra i processi come un albero
# gerarchico.
if [[ $OSTYPE == linux* ]]; then
    zstyle ':completion::*:kill:*:*' command 'ps xf -U $USER -o pid,%cpu,%mem,cmd'
else
    # -r -- sort by CPU usage
    zstyle ':completion:*:processes' command 'ps x -U $USER -r -o pid,%cpu,%mem,tt,args'
fi
# ... e ovviamente i colori. [from: https://github.com/seebi/zshrc]
zstyle ':completion::*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;32'

# cache
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/.zcompcache

# Completion con i colori di ls
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# completion from history [ https://github.com/seebi/zshrc/blob/master/options.zsh ]
zle -C hist-complete complete-word _generic
zstyle ':completion:hist-complete:*' completer _history
bindkey '^X^X' hist-complete

# extend ssh host completion with chef nodes. Just create a list of hostnames in ~/.chef_hosts
add_chef_nodes_to_hosts_completion() {
    zmodload zsh/mapfile
    local _ssh_hosts
    zstyle -s ':completion:*:hosts' hosts _ssh_hosts
    _ssh_hosts+=("${(f@)mapfile[$HOME/.chef_hosts]}")
    zstyle ':completion:*:hosts' hosts $_ssh_hosts
}

if [[ -s $HOME/.chef_hosts ]]; then
    add_chef_nodes_to_hosts_completion

    # check if the chef host file is stale
    if vpn_status >/dev/null; then
        if [[ $(( $(date +"%s") - $(stat -f "%m" $HOME/.chef_hosts) )) -gt 14200 ]]; then
            echo "WARNING: the chef hosts file $HOME/.chef_hosts is older than 4 hours; refreshing now."
            lckdo $HOME/.lock_chef $HOME/Preferences/bin/zsh_chef_completion.sh &
        fi
    fi
fi

# use hosts completion also for tmux-cssh
compdef _hosts tmux-cssh
# and also for bssh
compdef _hosts bssh

# Ctrl-X - SHIFT+S
# Completa usando le parole della schermata attuale di tmux.
# da zsh-lovers.
_complete_screen_display() {
    #[[ "$TERM" != screen* ]] && return 1

    if (( $+commands[gmktemp] )); then
        local TMPFILE=$(gmktemp)
    else
        local TMPFILE=$(mktemp)
    fi
    local -U -a _screen_display_wordlist
    trap "rm -f $TMPFILE" EXIT

    if ((${+TMUX})); then
        tmux capture-pane -b zshcomp \; save-buffer -b zshcomp $TMPFILE \; delete-buffer -b zshcomp </dev/null
    else
        echo "ahi ahi ahi no tmux"
        return
    fi
    _screen_display_wordlist=( ${(QQ)$(<$TMPFILE)} )
    _screen_display_wordlist[${_screen_display_wordlist[(i)$PREFIX]}]=""
    compadd -a _screen_display_wordlist
}
bindkey -r "^XS"
compdef -k _complete_screen_display complete-word '^XS'

# completion per pip
function _pip_completion {
    local words cword
    read -Ac words
    read -cn cword
    reply=( $( COMP_WORDS="$words[*]" \
        COMP_CWORD=$(( cword-1 )) \
        PIP_AUTO_COMPLETE=1 $words[1] ) )
}
compctl -K _pip_completion pip
# }}}

# WELCOME {{{
[[ -e $HOME/Preferences/bin/welcome.sh ]] && $HOME/Preferences/bin/welcome.sh
# }}}

# Emacs tramp support
# Sets the terminal to something simple so that emacs doesn't gets confused.
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ '

# PLUGINS AND STUFF {{{
source_if_exists "$HOME/Preferences/zsh/keephack"
source_if_exists "$HOME/Preferences/zsh/plugins/z/z.sh"
# }}}

# LOCAL SETTINGS {{{
source_if_exists "$HOME/.zshrc.local"
# }}}

# Invece di `return 0` alla fine del file ci metto questo assignment, che
# dovrebbe essere equivalente in termini di "return OK".
FOO="grosso peto che esce dalle chiappe roboanti"
# Se per caso questo file esce con un valore diverso da zero, sara' PANDEMONIO!
# return 0

# zprof
